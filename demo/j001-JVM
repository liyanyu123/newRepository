1.什么是JVM？
  JVM（Java Virtual Machine）又称Java虚拟机，是一种用于计算设备的规范，它是一个虚构出来的计算机，
  是通过在实际的计算机上仿真模拟各种计算机功能来实现的。

2.JVM内存分哪几个区？每个区的作用是什么？
  JVM内存分为5个区分别是：程序计数器(Program Counter Register)
                          Java栈(VM Stack)
                          本地方法栈(Native Method Stack)
                          方法区(Method Area)
                          堆(Heap)
  程序计数器：用来指示 执行哪条指令的。（相当于汇编语言中的PC寄存器）
              程序计数器是每个线程所私有的。
			  在JVM规范中规定，如果线程执行的是非native方法，则程序计数器中保存的是当前需要执行的指令的地址；
			  如果线程执行的是native方法，则程序计数器中的值是undefined。
　　          由于程序计数器中存储的数据所占空间的大小不会随程序的执行而发生改变，
              因此，对于程序计数器是不会发生内存溢出现象(OutOfMemory)的
  
  Java栈：用来存储Java方法。是为执行Java方法服务的，每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接和方法出口等信息。
          虚拟机栈是线程私有的，它的生命周期与线程相同。
  
  本地方法栈：用来存储本地的Java方法
  
  方法区：存储了每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码等
  
  堆：用来存储对象本身的以及数组，是全局共享的。

3.简述java垃圾回收机制 
  在JVM中，有一个垃圾回收线程，它是低优先级的，在正常情况下是不会执行的，只有在虚拟机空闲或者当前堆内存不足时，
  才会触发执行，扫描那些没有被任何引用的对象，并将它们添加到要回收的集合中，进行回收。

4.如何判断一个对象是否存活? 
  通过引用记数法算法和根搜索算法。
  跟搜索算法思想：选择名为“GC Roots”（垃圾收集对象）的对象为起始点，从这些GC Roots节点开始向下搜索，搜索走过的路径称之为引用链（Reference Chain）
  在java中可以作为GC Roots的对象有以下几种:
                     虚拟机栈中引用的对象
                     方法区类静态属性引用的对象
                     方法区常量池引用的对象
                     本地方法栈JNI引用的对象
  当一个对象到GC Roots没有任何引用链时（即不可达，两者之间无通路），则认为该对象为不可用的。但是在根搜索算法中，那些不可达的对象并非是“真正死亡”的，
  主要看如下两次标记过程： a、当没有发现引用链时，进行第一次标记，此时进行第一次筛选，条件为此对象是否有必要执行finalize方法。
                              当对象没有覆盖finalize方法，或者finalize方法已经被JVM调用过，此种情况下认为没有必要执行finalize方法。
                           b、如果有必要执行finalize方法，此时对象会被放置在一个F-Queue队列中，会有一个优先级比较低的FInalizer线程去执行触发finalize方法。
						      finalize方法是对象真正判定死活的最后一次机会。此时，GC会对队列中的对象进行第二次标记，如果对象在finalize方法中完成了自救，
							  即和GC Roots建立了通路，则在第二次标记时该对象将被移出回收的集合。否则，只能判定对象死了

5.JVM在执行一个Java类时所经历的过程有哪些？请按顺序写出！ 
  Java源代码文件经由Java编译器编译成为字节码文件，然后由Class Loader（类加载器）加载到对内存中，由JVM执行引擎执行程序。